// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Coupon/ent/coupon"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CouponCreate is the builder for creating a Coupon entity.
type CouponCreate struct {
	config
	mutation *CouponMutation
	hooks    []Hook
}

// SetCode sets the "Code" field.
func (cc *CouponCreate) SetCode(s string) *CouponCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetAmount sets the "Amount" field.
func (cc *CouponCreate) SetAmount(f float64) *CouponCreate {
	cc.mutation.SetAmount(f)
	return cc
}

// SetAlreadyUsed sets the "AlreadyUsed" field.
func (cc *CouponCreate) SetAlreadyUsed(b bool) *CouponCreate {
	cc.mutation.SetAlreadyUsed(b)
	return cc
}

// SetNillableAlreadyUsed sets the "AlreadyUsed" field if the given value is not nil.
func (cc *CouponCreate) SetNillableAlreadyUsed(b *bool) *CouponCreate {
	if b != nil {
		cc.SetAlreadyUsed(*b)
	}
	return cc
}

// SetExpireAt sets the "ExpireAt" field.
func (cc *CouponCreate) SetExpireAt(i int64) *CouponCreate {
	cc.mutation.SetExpireAt(i)
	return cc
}

// SetNillableExpireAt sets the "ExpireAt" field if the given value is not nil.
func (cc *CouponCreate) SetNillableExpireAt(i *int64) *CouponCreate {
	if i != nil {
		cc.SetExpireAt(*i)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CouponCreate) SetID(u uuid.UUID) *CouponCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CouponCreate) SetNillableID(u *uuid.UUID) *CouponCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// Mutation returns the CouponMutation object of the builder.
func (cc *CouponCreate) Mutation() *CouponMutation {
	return cc.mutation
}

// Save creates the Coupon in the database.
func (cc *CouponCreate) Save(ctx context.Context) (*Coupon, error) {
	var (
		err  error
		node *Coupon
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CouponCreate) SaveX(ctx context.Context) *Coupon {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CouponCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CouponCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CouponCreate) defaults() {
	if _, ok := cc.mutation.AlreadyUsed(); !ok {
		v := coupon.DefaultAlreadyUsed
		cc.mutation.SetAlreadyUsed(v)
	}
	if _, ok := cc.mutation.ExpireAt(); !ok {
		v := coupon.DefaultExpireAt
		cc.mutation.SetExpireAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := coupon.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CouponCreate) check() error {
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "Code", err: errors.New(`ent: missing required field "Coupon.Code"`)}
	}
	if v, ok := cc.mutation.Code(); ok {
		if err := coupon.CodeValidator(v); err != nil {
			return &ValidationError{Name: "Code", err: fmt.Errorf(`ent: validator failed for field "Coupon.Code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Amount(); !ok {
		return &ValidationError{Name: "Amount", err: errors.New(`ent: missing required field "Coupon.Amount"`)}
	}
	if _, ok := cc.mutation.AlreadyUsed(); !ok {
		return &ValidationError{Name: "AlreadyUsed", err: errors.New(`ent: missing required field "Coupon.AlreadyUsed"`)}
	}
	if _, ok := cc.mutation.ExpireAt(); !ok {
		return &ValidationError{Name: "ExpireAt", err: errors.New(`ent: missing required field "Coupon.ExpireAt"`)}
	}
	return nil
}

func (cc *CouponCreate) sqlSave(ctx context.Context) (*Coupon, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cc *CouponCreate) createSpec() (*Coupon, *sqlgraph.CreateSpec) {
	var (
		_node = &Coupon{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coupon.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: coupon.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupon.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := cc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: coupon.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := cc.mutation.AlreadyUsed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coupon.FieldAlreadyUsed,
		})
		_node.AlreadyUsed = value
	}
	if value, ok := cc.mutation.ExpireAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: coupon.FieldExpireAt,
		})
		_node.ExpireAt = value
	}
	return _node, _spec
}

// CouponCreateBulk is the builder for creating many Coupon entities in bulk.
type CouponCreateBulk struct {
	config
	builders []*CouponCreate
}

// Save creates the Coupon entities in the database.
func (ccb *CouponCreateBulk) Save(ctx context.Context) ([]*Coupon, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Coupon, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CouponCreateBulk) SaveX(ctx context.Context) []*Coupon {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CouponCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CouponCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
