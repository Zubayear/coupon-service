// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Coupon/ent/coupon"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Coupon is the model entity for the Coupon schema.
type Coupon struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Code holds the value of the "Code" field.
	Code string `json:"Code,omitempty"`
	// Amount holds the value of the "Amount" field.
	Amount float64 `json:"Amount,omitempty"`
	// AlreadyUsed holds the value of the "AlreadyUsed" field.
	AlreadyUsed bool `json:"AlreadyUsed,omitempty"`
	// ExpireAt holds the value of the "ExpireAt" field.
	ExpireAt int64 `json:"ExpireAt,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Coupon) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case coupon.FieldAlreadyUsed:
			values[i] = new(sql.NullBool)
		case coupon.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case coupon.FieldExpireAt:
			values[i] = new(sql.NullInt64)
		case coupon.FieldCode:
			values[i] = new(sql.NullString)
		case coupon.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Coupon", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Coupon fields.
func (c *Coupon) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coupon.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case coupon.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case coupon.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Amount", values[i])
			} else if value.Valid {
				c.Amount = value.Float64
			}
		case coupon.FieldAlreadyUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field AlreadyUsed", values[i])
			} else if value.Valid {
				c.AlreadyUsed = value.Bool
			}
		case coupon.FieldExpireAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ExpireAt", values[i])
			} else if value.Valid {
				c.ExpireAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Coupon.
// Note that you need to call Coupon.Unwrap() before calling this method if this Coupon
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Coupon) Update() *CouponUpdateOne {
	return (&CouponClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Coupon entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Coupon) Unwrap() *Coupon {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Coupon is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Coupon) String() string {
	var builder strings.Builder
	builder.WriteString("Coupon(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", Code=")
	builder.WriteString(c.Code)
	builder.WriteString(", Amount=")
	builder.WriteString(fmt.Sprintf("%v", c.Amount))
	builder.WriteString(", AlreadyUsed=")
	builder.WriteString(fmt.Sprintf("%v", c.AlreadyUsed))
	builder.WriteString(", ExpireAt=")
	builder.WriteString(fmt.Sprintf("%v", c.ExpireAt))
	builder.WriteByte(')')
	return builder.String()
}

// Coupons is a parsable slice of Coupon.
type Coupons []*Coupon

func (c Coupons) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
